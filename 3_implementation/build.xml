<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project name="AI" basedir="." default="compile">
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	
	<property name="working.home" value="working"/>
	<property name="archive.home" value="${working.home}/archive"/>
	<property name="bin.home" value="bin"/>
	<property name="datasets.home" value="datasets"/>
	<property name="docs.home" value="docs"/>
	<property name="lib.home" value="lib"/>
	<property name="src.home" value="src"/>
	<property name="tools.home" value="tools"/>

	<property name="doctype" value="*.txt, *.pdf, *.doc, *.docx"/>
	<property name="product" value="ai"/>
	<property name="version" value="v1"/>



	<!--
	Function: Creating and maintaining a mathematical and statistical library that is accurate requires a greater degree of communication than might be the case for other components.
	Affected packages, classes: net.ea.pso.PSOImpl
	Referred jars:
	Source: https://commons.apache.org/proper/commons-math/
	Vendor: Apache
	Archive: newtech-research/data-structure-alg/commons-math, newtech-research/prog-language/java/apache-commons/commons-math
	Version: 3.5 build 2015
	Status: using
	Note:
	-->
	<property name="commons-math3.jar" value="${lib.home}/commons-math3-3.5.jar"/>


	<!--
	Function: Hudup framework provides both essential classes and runtime environment.
	Affected packages, classes: net.ea.adapter, net.ml.adapter
	Referred jars:
	Source: https://github.com/sunflowersoft/hudup-ext/tree/master/3_implementation/src/net/hudup
	Vendor: Loc Nguyen
	Archive: working/projects/hudup-ext/3_implementation/src/net/hudup
	Version: 13
	Status: using
	Note: Actually, only hudup core classes (net.hudup.core.*) in this jar lib are used in this AI project.
	-->
	<property name="hudup.jar" value="${lib.home}/hudup.jar"/>


	<!--
	Function: The runtime library for Hudup framework.
	Affected packages, classes: Require to run evaluator.
	Referred jars:
	Source: http://www.locnguyen.net/st/products/hudup
	Vendor: Loc Nguyen
	Archive: working/projects/hudup-ext/3_implementation
	Version: 12 build 2019.09.16
	Status: using
	Note:
	-->
	<property name="hudup-runtime-lib.jar" value="${lib.home}/hudup-runtime-lib.jar"/>


	<!--
	Function: Jayes is a Bayesian Network Library for Java. It has initially been created as my bachelor's thesis and it's goal is to provide highly efficient Bayesian Networks algorithms to the open souce community.
	Affected packages, classes: net.ml.bnet.FactoryImpl
	Referred jars:
	Source: https://github.com/kutschkem/Jayes
	Vendor: Michael Kutschke
	Archive: newtech-research/bayesian-network/JAYES
	Version: 2.6.0 build 2012
	Status: using
	Note:
	-->
	<property name="jayes.jar" value="${lib.home}/org.eclipse.recommenders.jayes-2.6.0-158.jar"/>
	<property name="jayes-io.jar" value="${lib.home}/org.eclipse.recommenders.jayes.io-2.6.0-158"/>


	<!--
	Function: Parsing mathematical expressions.
	Affected packages, classes: net.ea.pso.ExprFunction
	Referred jars:
	Source: http://www.speqmath.com/tutorials/expression_parser_java
	Vendor: Jos de Jong
	Archive: D:/newtech-research/natural-language-processing/expression-parser/simple/expression_parser_java.zip
	Version: build 2010.01
	Status: using
	Note:
	-->
	<property name="parser.jong" value="${bin.home}/net/ea/pso/logistic/speqmath/*"/>


	<!--
	List of classes and packages which use libraries:
	
	net.ea.adapter: hudup.jar (only core classes in net.hudup.core.*)
	net.ea.pso.ExprFunction: parser.jong
	net.ea.pso.PSOImpl: commons-math3.jar
	net.ml.adapter: hudup.jar
	net.ml.bnet.FactoryImpl: jayes.jar, jayes-io.jar
	-->
	
	
	<path id="build.class.path">
		<pathelement path="${bin.home}"/>
		<fileset dir="${lib.home}">
			<include name="*.jar"/>
		</fileset>
	</path>


	<target name="compile" description="Compile source code">
		<mkdir dir="${bin.home}"/>

		<javac srcdir="${src.home}" destdir="${bin.home}"
				debug="on" includeAntRuntime="false">
				
			<include name="**/*.java"/>
			<classpath refid="build.class.path"/>
		</javac>
    
		<copy todir="${bin.home}">
			<fileset dir="${src.home}" excludes="**/*.java"/>
		</copy>
	</target>


	<target name="clean-archive" description="Clean binary code and temporary files in ${archive.home} directory">
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${archive.home}"/>
		</delete>
	</target>


	<target name="clean-working" description="Clean binary code and temporary files in ${working.home} directory">
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${working.home}"/>
		</delete>
	</target>


	<target name="clean" description="Clean binary code and temporary files in ${bin.home} directory and ${working.home} directory">
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${bin.home}" includes="**"/>
		</delete>
		
		<antcall target="clean-working" />
	</target>


	<target name="docs" depends="compile" description="Generating javadoc to folder ${docs.home}/api">
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${docs.home}/api" includes="**"/>
		</delete>

		<javadoc destdir="${docs.home}/api"
			classpathref="build.class.path"
			sourcepath="${src.home}"
			excludepackagenames="net.temp.*, net.ea.pso.logistic.speqmath.*">
		</javadoc>
	</target>


	<target name="docs-zip" depends="compile" description="Generating and compressing javadoc to folder ${archive.home}">
		<antcall target="clean-archive" />

		<javadoc destdir="${archive.home}"
			classpathref="build.class.path"
			sourcepath="${src.home}"
			excludepackagenames="net.temp.*, net.ea.pso.logistic.speqmath.*">
		</javadoc>

		<zip destfile="${archive.home}/${product}-${version}-doc.zip" basedir="${archive.home}"/>
		
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${archive.home}" includes="**" excludes="${product}-${version}-doc.zip"/>
		</delete>
	</target>


	<target name="all-in-one" depends="compile" description="Zip whole framework">
		<mkdir dir="${archive.home}"/>
		<antcall target="clean-archive" />

		<zip destfile="${archive.home}/${product}-${version}-all-in-one.zip" basedir="." 
			includes="${bin.home}/**, 
				${datasets.home}/**, 
				${docs.home}/**, 
				${lib.home}/**, 
				${src.home}/**, 
				${tools.home}/**, *" 
			excludes="${working.home}">
		</zip>
	</target>


	<target name="jar-all" depends="compile" description="Create all packages">
		<mkdir dir="${archive.home}"/>
		<antcall target="clean-archive" />
		
		<if>
		<equals arg1="${include-runtime-lib}" arg2="embed" />
		<then>
			<jar destfile="${archive.home}/${product}.jar">
	    		<fileset dir="${bin.home}"/>
	    		<restrict>
	     			<name name="**"/>
					<archives>
						<zips>
							<fileset dir="${lib.home}" includes="*.jar, *.zip"/>
						</zips>
					</archives>
	    		</restrict>
	    		
				<manifest>
					<attribute name="Main-Class" value="net.ea.Starter"/>
				</manifest>
			</jar>
		</then>
		<else>
			<if>
			<equals arg1="${include-runtime-lib}" arg2="normal" />
			<then>
				<antcall target="jar-runtime-lib" />
			</then>
			</if>

			<jar destfile="${archive.home}/${product}.jar">
	    		<fileset dir="${bin.home}"/>

				<manifest>
					<attribute name="Main-Class" value="net.ea.Starter"/>
				</manifest>
			</jar>
		</else>
		</if>
		
		<copy todir="${archive.home}">
			<fileset dir="." includes="${doctype}, *.bat, *.sh, *.script" excludes="build.*"/>
		</copy>
		
		<zip destfile="${archive.home}/${product}-${version}.zip" basedir="${archive.home}"/>
		
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${archive.home}" includes="**" excludes="${product}-${version}.zip"/>
		</delete>
	</target>


	<target name="jar-all-src" depends="compile" description="Packing all sources">
		<mkdir dir="${archive.home}"/>
		<antcall target="clean-archive" />
		
		<if>
		<equals arg1="${include-runtime-lib-src}" arg2="embed" />
		<then>
			<jar destfile="${archive.home}/${product}-src.jar">
	    		<fileset dir="${src.home}"/>
	    		<restrict>
	     			<name name="**"/>
					<archives>
						<zips>
							<fileset dir="${lib.home}/src" includes="*.jar, *.zip"/>
						</zips>
					</archives>
	    		</restrict>
			</jar>
		</then>
		<else>
			<if>
			<equals arg1="${include-runtime-lib-src}" arg2="normal" />
			<then>
				<antcall target="jar-runtime-lib-src" />
			</then>
			</if>

			<jar destfile="${archive.home}/${product}-src.jar">
	    		<fileset dir="${src.home}"/>
			</jar>
		</else>
		</if>
		
		<copy todir="${archive.home}">
			<fileset dir="." includes="${doctype}, *.bat, *.sh, *.xml, *.script"/>
		</copy>
		
		<zip destfile="${archive.home}/${product}-${version}-src.zip" basedir="${archive.home}"/>
		
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${archive.home}" includes="**" excludes="${product}-${version}-src.zip"/>
		</delete>
	</target>


	<target name="jar-ml" depends="compile" description="Create machine learning (ML) package">
		<mkdir dir="${archive.home}"/>
		<antcall target="clean-archive" />

		<if>
		<equals arg1="${include-runtime-lib}" arg2="embed" />
		<then>
			<jar destfile="${archive.home}/${product}-ml.jar">
	    		<fileset dir="${bin.home}" includes="net/ml/**"/>
				<!--
	    		<restrict>
	     			<name name="**"/>
					<archives>
						<zips>
							<fileset dir="${lib.home}" includes="${commons-math3.jar}"/>
						</zips>
					</archives>
	    		</restrict>
				-->
	    		
				<manifest>
					<attribute name="Main-Class" value="net.ml.Starter"/>
				</manifest>
			</jar>
		</then>
		<else>
			<if>
			<equals arg1="${include-runtime-lib}" arg2="normal" />
			<then>
				<antcall target="jar-runtime-lib" />
			</then>
			</if>

			<jar destfile="${archive.home}/${product}-ml.jar">
	    		<fileset dir="${bin.home}" includes="net/ml/**"/>
	    		
				<manifest>
					<attribute name="Main-Class" value="net.ml.Starter"/>
				</manifest>
			</jar>
		</else>
		</if>

		<copy todir="${archive.home}">
			<fileset dir="." includes="${doctype}, env*.*, ml*.*, *.script"/>
		</copy>

		<zip destfile="${archive.home}/${product}-${version}-ml.zip" basedir="${archive.home}"/>
		
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${archive.home}" includes="**" excludes="${product}-${version}-ml.zip"/>
		</delete>
	</target>


	<target name="jar-ea" depends="compile" description="Create evolution algorithm (EA) package">
		<mkdir dir="${archive.home}"/>
		<antcall target="clean-archive" />

		<if>
		<equals arg1="${include-runtime-lib}" arg2="embed" />
		<then>
			<jar destfile="${archive.home}/${product}-ea.jar">
	    		<fileset dir="${bin.home}" includes="net/ea/**"/>
	    		<restrict>
	     			<name name="**"/>
					<archives>
						<zips>
							<fileset dir="${lib.home}" includes="${commons-math3.jar}"/>
						</zips>
					</archives>
	    		</restrict>
	    		
				<manifest>
					<attribute name="Main-Class" value="net.ea.Starter"/>
				</manifest>
			</jar>
		</then>
		<else>
			<if>
			<equals arg1="${include-runtime-lib}" arg2="normal" />
			<then>
				<antcall target="jar-runtime-lib" />
			</then>
			</if>

			<jar destfile="${archive.home}/${product}-ea.jar">
	    		<fileset dir="${bin.home}" includes="net/ea/**"/>
	    		
				<manifest>
					<attribute name="Main-Class" value="net.ea.Starter"/>
				</manifest>
			</jar>
		</else>
		</if>

		<copy todir="${archive.home}">
			<fileset dir="." includes="${doctype}, env*.*, ea*.*, *.script"/>
		</copy>

		<zip destfile="${archive.home}/${product}-${version}-ea.zip" basedir="${archive.home}"/>
		
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${archive.home}" includes="**" excludes="${product}-${version}-ea.zip"/>
		</delete>
	</target>


	<target name="jar-runtime-lib" depends="compile" description="Create runtime library">
		<mkdir dir="${archive.home}"/>

		<jar destfile="${archive.home}/${product}-runtime-lib.jar" update="true">
    		<restrict>
     			<name name="**"/>
				<archives>
					<zips>
						<fileset dir="${lib.home}" includes="*.jar, *.zip"/>
					</zips>
				</archives>
    		</restrict>
    		
		</jar>
	</target>


	<target name="jar-runtime-lib-src" depends="compile" description="Packing runtime library source">
		<mkdir dir="${archive.home}"/>

		<jar destfile="${archive.home}/${product}-runtime-lib-src.jar" update="true">
    		<restrict>
     			<name name="**"/>
				<archives>
					<zips>
						<fileset dir="${lib.home}/src" includes="*.jar, *.zip"/>
					</zips>
				</archives>
    		</restrict>
		</jar>
	</target>


	<target name="jar-update" depends="compile" description="Update whole package">
		<jar destfile="${archive.home}/${package}.jar" update="true">
    		<fileset dir="${bin.home}"/>
		</jar>
	</target>


	<target name="datasets" depends="compile" description="Create datasets archive">
		<mkdir dir="${archive.home}"/>
		<antcall target="clean-archive" />

		<zip destfile="${archive.home}/datasets.zip" basedir="${datasets.home}" />
	</target>


</project>

